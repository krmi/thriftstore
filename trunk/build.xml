<?xml version="1.0"?>

    <!--
     | The project structure is
     |   dfsservice/
     |       build.properties
     |       build.xml
     |       include/
     |       lib/
     |       src/
     |           cpp/
     |           java/
     |
     | directories created by the build process are
     |
     |   dfsservice/
     |       include/
     |       lib/
     |       src/
     |           cpp/
     |           java/
     |       build/
     |           cpp/
     |           java/
     |       dist/
     |       reports/
     |
     | build takes the result of compiling the thirft-generated stubs for Java.
     | These are placed under java/  There is no comparable step for the
     | thrift-generated cpp files.  The compiled client and server files are
     | also placed there for both Java and C++.
     |
     | dist has only a jar containing the thrift-generated class files and
     | anything else in build/java/com/opendata/dfsservice.  For now, none of
     | the c++ artifacts are copied or moved to dist/.
     |
     | reports is created from the reports target (or any of the targets it
     | delegates to) and holds the output from the code analysis tools.
     | Currently, checkstyles and findbugs and javadocs are used.
    -->

    <!-- dfsservice project.  Calling 'ant' defaults to 'ant compile' -->
    <project name="dfsservice" default="compile" basedir=".">


    <!--
     | Property file to define parmeters used in this build file.  Please keep
     | it simple.
    -->
    <property file="build.properties"/>


    <!-- Set up the classpath -->
    <path id="classpath">
        <!--  Some jars are local like libthrift.jar and log4j.jar -->
        <fileset dir="./lib">
            <include name="*.jar"/>
        </fileset>

        <!-- hadoop core jar declared in the property file -->
        <fileset dir="${hadoop.dir}">
            <include name="hadoop-${hadoop.ver}-core.jar"/>
        </fileset>

    </path>


    <!-- Ant Targets -->

    <!--
     | DEFAULT TARGET
     | ant compile
     | Compile the files for the DFS Service
     | Uses compile-java and compile-cpp 
    -->
    <target name="compile" 
            depends="compile-java, compile-cpp"
            description="Compiles the files for DFS Service">
    </target>


    <!--
     | ant compile-thrift.
     | Generate files from the IDL
    -->
    <target name="compile-thrift"
            description="Compiles the thrift IDL file">
        <exec executable="thrift">
            <arg line="--gen cpp --gen java -o src -strict src/${thrift.idl}"/>
        </exec>
    </target>


    <!--
     | ant compile-thrift-generated
     | Compile the generated files under src
     | Uses compile-thrift-generated-java and compile-thrift-generated-cpp
    -->
    <target name="compile-thrift-generated" 
            depends="compile-thrift-generated-java, compile-thrift-generated-cpp"
            description="Compiles the files generated by thrift">
    </target>


    <!--
     | ant package-generated
     | Package the compiled generated files
     | Uses jar-generated and package-cpp
    -->
    <target name="package-generated"
            depends="jar-generated, package-cpp"
            description="package the compiled generated files">
    </target>


    <!--
     | ant clean
     | Deletes the generated files, build and dist directories.
    -->
    <target name="clean"
            description="Cleanup">
        <delete dir="dist"/>
        <delete dir="build"/>
        <delete dir="src/gen-cpp"/>
        <delete dir="src/gen-java"/>
        <exec executable="make" dir="src/cpp" searchpath="yes" failonerror="yes">
            <arg value="clean"/>
        </exec>
        <delete dir="${reports.dir}"/>
    </target>

    <!--
     | ant reports
     | Generates Javadocs and Code Analysis reports.
     | Uses findbugs. checkstyle and doc
    -->
    <target name="reports"
            depends="findbugs,checkstyle,doc"
            description="runs the code analysis targets in this file"/>


    <!-- Delegated Targets -->


    <!-- COMPILE CODE -->

    <!--
     | Called from compile taks
     | Compiles the java files under src/java.
    -->
    <target name="compile-java"
            depends="jar-generated"
            description="Compile the java source">
        <mkdir dir="build/java"/>
        <javac destdir="build/java"
               srcdir="src"
               includes="java/**"
               debug="on"
               deprecation="on"
               classpath="dist/${ant.project.name}-thrift-generated.jar"
               classpathref="classpath">
        </javac>

        <!-- copy script files to build/java -->
        <copy todir="build/java" overwrite="true">
            <fileset dir="src/java">
                <include name="**/*.sh"/>
            </fileset>
        </copy>

        <!-- Copy does not preserve file permissions, so we do this to make sure
             that the binaries and scripts are executable. -->
        <exec executable="chmod">
            <arg line="-R +x build/java/"/>
        </exec>

    </target>


    <!--
     | Called from compile task
     | Uses make to build the cpp files under src/cpp
    -->
    <target name="compile-cpp"
            description="Compiles the cpp source">
        <echo> System OS Name is ${os.name} </echo>

        <!-- LINUX build the binaries -->
        <exec executable="make" dir="src/cpp" searchpath="yes" failonerror="yes" os="Linux">
            <arg value="BOOST_DIR = ${boost.linux}"/>
            <arg value="THRIFT_INCLUDE_DIR=${thrift.include}"/>
            <arg value="THRIFT_LIB_DIR=${thrift.lib}"/>
            <arg value="SECTOR_HOME_DIR=${sector.home}"/>
        </exec>

        <!-- MAC OSX build the binaries -->
        <exec executable="make" dir="src/cpp" searchpath="yes" failonerror="yes" os="Mac OS X">
            <arg value="BOOST_DIR = ${boost.mac}"/>
        </exec>

        <!-- Move the structure to build/cpp -->
        <move todir="build/cpp" overwrite="true">
            <fileset dir="src/cpp">
                <exclude name="**/Makefile"/>
                <exclude name="**/*.cpp"/>
                <exclude name="**/*.sh"/>
            </fileset>
        </move>

        <!-- Copy script files to build/cpp -->
        <copy todir="build/cpp" overwrite="true">
            <fileset dir="src/cpp">
                <include name="**/*.sh"/>
            </fileset>
        </copy>

        <!-- Copy does not preserve file permissions, so we do this to make sure
             that the binaries and scripts are executable. -->
        <exec executable="chmod">
            <arg line="-R +x build/cpp/"/>
        </exec>
    </target>


    <!--
     | Compile java files generated by Thrift
     | Called from the compile-thrift-generated
     | Uses compile-thrift
    -->
    <target name="compile-thrift-generated-java"
            depends="compile-thrift"
            description="Compiles the java files generated by thrift">
        <mkdir dir="build"/>
        <mkdir dir="build/java"/>
        <javac destdir="build/java"
               srcdir="src"
               includes="gen-java/**"
               debug="on"
               deprecation="on"
               optimize="on"
               classpathref="classpath">
        </javac>
    </target>

    <!--
     | Compiles thrift generated cpp files.
     | Called from the compile-thrift-generated
     | Uses compile-thrift
    -->
    <target name="compile-thrift-generated-cpp"
            depends="compile-thrift"
            description="Compiles the cpp files generated by thrift">
        <echo>The generated files in src/gen-cpp are made along with the server</echo>
    </target>


    <!--
     | Create a jar with the compiled Thrift-generated files.
     | Called from the package-generated
     | Uses compile-thrift-generated-java
    -->
    <target name="jar-generated"
            depends="compile-thrift-generated-java"
            description="jar up the compiled generated java files">
        <mkdir dir="dist"/>
        <jar destfile="dist/${ant.project.name}-thrift-generated.jar">
            <fileset dir="build"/>
        </jar>
    </target>

    <!--
     | No-op added as a placeholder for symmetry
     | Called from the package-generated
     | USes compile-thrift-generated-cpp
    -->
    <target name="package-cpp"
            depends="compile-thrift-generated-cpp"
            description="packages the compiled cpp files">
        <echo>package cpp is sot implemented</echo>
    </target>


    <!-- REPORTS & DOCS -->


    <!--
     | Generate Findbugs report.
    -->
    <target name="findbugs"
            depends="clean,compile"
            description="Static bug checker.">

        <available file="${findbugs.home}/lib/${findbugs.jar}"
                   property="findbugs.available"/>
        <fail unless="findbugs.available"
              message="Error: ${findbugs.jar} not found."/>

        <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties"
                 classpath="${findbugs.home}/lib/${findbugs.jar}" />

        <mkdir dir="${reports.dir}"/>
        <findbugs home="${findbugs.home}"
                  reportLevel="low"
                  output="html"
                  stylesheet="default.xsl"
                  outputFile="${reports.dir}/findbugs_${ant.project.name}_report.html"
                  auxClasspath="lib/hadoop-0.18.3-core.jar:lib/libthrift.jar">
            <sourcePath path="src/java" />
            <class location="dist/${ant.project.name}-thrift-generated.jar" />
        </findbugs>
    </target>

    <!--
     | Run Checkstyle analysis.
    -->
    <target name="checkstyle"
            description="Checks the style of the sources and reports issues.">
        <available file="${checkstyle.home}/${checkstyle.jar}"
                   property="checkstyle.available"/>
        <fail unless="checkstyle.available"
              message="Error: ${checkstyle.jar} not found."/>

        <taskdef resource="checkstyletask.properties"
                 classpath="${checkstyle.home}/${checkstyle.jar}" />

        <mkdir dir="${reports.dir}"/>
        <checkstyle config="${checkstyle.home}/${checkstyle.rules}"
                    failOnViolation="false">

            <fileset dir="src/java" includes="**/*.java" />
            <formatter type="xml"
                       tofile="${reports.dir}/checkstyle_${ant.project.name}_report.xml"/>
        </checkstyle>
    </target>

    <!--
     | Generate Javadocs.
    -->
    <target name="doc"
            description="Generate Javadocs">
        <mkdir dir="${reports.dir}"/>
        <javadoc destdir="${reports.dir}/api"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="DFS API">

            <packageset dir="src/java"
                        defaultexcludes="yes">
                <include name="com/opendatagroup/dfsservice/**"/>
                <exclude name="gen-java/**"/>
            </packageset>

            <doctitle><![CDATA[<h1>ThriftStore: Hadoop and Sector Interoperability via Thrift</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2009 Open Cloud Consortium. All Rights Reserved.</i>]]></bottom>
            <group title="DFS Packages" packages="com.opendatagroup.dfsservice.*"/>
            <link offline="true" href="http://java.sun.com/javase/6/docs/api/"
                  packagelistLoc="/tmp"/>
            <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
        </javadoc>
    </target>

</project>
